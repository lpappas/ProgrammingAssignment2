find.package("devtools")
install.packages("devtools")
install.packages("devtools")
find.package("devtools")
library("devtools")
find_rtools()
getwd
getwd()
getwd()
pwd
getwd()
library(datasets)
data(mtcars)
x <- with(mtcars, tapply(hp, cyl, mean))
y <- as.numeric(x["8"] - x["4"])
debug(ls)
ls
n
4
n
ls
?numeric
x <- numeric()
x
x <- matrix()
x
? <<-
?<<-
source("cachematrix.R")
getwd()
setwd("~/COURSERA/ProgrammingAssignment2")
getwd()
source("cachematrix.R")
source("cachematrix.R")
x <- matrix(1:4, nrow = 2, ncol= 2)
x
y <- solve(x)
y
y <- 0
makeCacheMatrix(x)
lea <- makeCacheMatrix(x)
cacheSolve(lea)
cacheSolve(lea, x)
cacheSolve(lea, x)
x <- matrix(4:1, nrow = 2, ncol = 2)
y <- solve(x)
y
cacheSolve(lea, x)
data
?all.equal
source("cachematrix.R")
source("cachematrix.R")
x <- matrix(1:4, nrow=2, ncol=2)
y <- matrix(4:1, nrow=2, ncol=2)
z <- all.equal(x, y)
z
x <- y
z <- all.equal(x, y)
z
z <- isTRUE(all.equal(matrix_y, data))
z <- isTRUE(all.equal(x,y))
z
y <- matrix(4:1, nrow=2, ncol=2)
z <- isTRUE(all.equal(x,y))
z
x
y
x <- matrix(1:4, nrow=2, ncol=2)
z <- isTRUE(all.equal(x,y))
z
source("cachematrix.R")
x
t
y
lea <- makeCacheMatrix(x)
cacheSolve(lea, x)
cacheSolve(lea, x)
cacheSolve(lea, y)
source("cachematrix.R")
lea <- makeCacheMatrix(x)
x
cacheSolve(lea, x)
cacheSolve(lea, x)
cacheSolve(lea, y)
cacheSolve(lea, x)
lea$get()
cacheSolve(lea, y)
lea$get()
source("cachematrix.R")
x
y
lea <- makeCacheMatrix(x)
cacheSolve(lea, x)
cacheSolve(lea, y)
source("cachematrix.R")
x
y
lea <- makeCacheMatrix(x)
cacheSolve(lea, x)
source("cachematrix.R")
lea <- makeCacheMatrix(x)
x
y
cacheSolve(lea, x)
cacheSolve(lea, x)
cacheSolve(lea, y)
cacheSolve(lea, y)
cacheSolve(lea, x)
lea <- makeCacheMatrix(mattrix(0))
cacheSolve(lea, x)
lea <- makeCacheMatrix(matrix(0))
cacheSolve(lea, x)
lea <- makeCacheMatrix(x)
lea.get()
lea <- makeCacheMatrix(x)
lea.get()
lea$get()
let$getinverse()
lea$getinverse()
cacheSolve(lea, x)
lea$getinverse()
lea <- makeCacheMatrix(matrix(0))
lea$get()
lea$getinverse()
source("cachematrix.R")
x
y
lea <- makeCacheMatrix(matrix(0))
lea$get()
lea$getinverse()
cacheSolve(lea, x)
cacheSolve(lea, x)
cacheSolve(lea, x)
cacheSolve(lea, x)
y
cacheSolve(lea, y)
cacheSolve(lea, y)
cacheSolve(lea, y)
cacheSolve(lea, y)
cacheSolve(lea, x)
cacheSolve(lea, x)
cacheSolve(lea, x)
source("cachematrix.R")
lea <- makeCacheMatrix(matrix(0))
lea$get()
lea$getinverse()
x
cacheSolve(lea, x)
cacheSolve(lea, x)
cacheSolve(lea, y)
cacheSolve(lea, y)
cacheSolve(lea, y)
cacheSolve(lea, x)
